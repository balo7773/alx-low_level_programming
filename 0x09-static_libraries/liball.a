!<arch>
0-isupper.c/    0           0     0     644     260       `
#include "main.h"
/**
 * _isupper - a function to check for uppercase
 * main - Entry point
 * @c: the variable to check
 * Return: Always 1 for uppercase else 0 (success)
 */

int _isupper(int c)
{

	if (c >= 65 && c <= 90)
	{
	return (1);
	}

	return (0);
}
0-memset.c/     0           0     0     644     334       `
#include "main.h"
/**
 * _memset - a function that fills n byte
 * @s: starting address of memory area
 * @b: data to be stored(char)
 * @n: number of bytes to fill
 * Return: a pointer to the memory area
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     0         `
100-atoi.c/     0           0     0     644     0         `
1-isdigit.c/    0           0     0     644     259       `
#include "main.h"
/**
 * _isdigit - a function that checks digit 0 to 9
 * main - Entry point
 * @c: the variable to be checked
 * Return: Always 1 if c is a digit else 0
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
	return (1);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     333       `
#include "main.h"
/**
 * _memcpy - a function that copies memory area
 * @dest: where n byte is stored
 * @src:  where n byte is copied
 * *@n: amount of bytes to copied
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     411       `
#include "main.h"
/**
 * _strncat - a function to cat n char to dest
 * @dest: the destination string variable
 * @src: the source string variable
 * @n: n char to cat(stored in int)
 * Return: dest (n char)
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	for (i = 0; dest[i] != '\0'; i++)
	{
	}

	for (j = 0; j < n && src[j] != '\0' ; j++)
	{
		dest[i + j] = src[j];

	}
	return (dest);
}

2-strchr.c/     0           0     0     644     271       `

#include "main.h"
/**
 * _strchr - Entry point
 * @s: string to be searched
 * @c: char to check in s 
 * Return: string(pointer to s)
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     245       `
#include "main.h"
/**
 * _strlen- a function to check string length
 * @s: char array(string) to be checked
 * Return: String length
 */
int _strlen(char *s)
{
	int strlth;

	strlth = 0;
	while (s[strlth])
	{
		strlth++;
	}

	return (strlth);
}

2-strncpy.c/    0           0     0     644     372       `
#include "main.h"

/**
 * _strncpy - a function used to copy a string
 * @dest: a string variable
 * @src: a string variable
 * @n: no of char to be copied(in int)
 * Return: dest (a string)
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != 0; i++)
	{
		dest[i] = src[i];
	}
	if (i < n)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-puts.c/       0           0     0     644     279       `
#include <stdio.h>
#include "main.h"
/**
 * _puts - a function that prints a string
 * @str: a pointer to store the string value
 * Return: always string
 */
void _puts(char *str)
{
	int num = 0;

	while (str[num] != '\0')
	{
		_putchar(str[num]);
		num++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     348       `
#include "main.h"
/**
 * _strcmp - function to compare string values
 * @s1: string variable to compare
 * @s2: 2nd string variable to compare
 * Return: Always 0 (success)
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}
	return (0);
}
3-strspn.c/     0           0     0     644     439       `
#include "main.h"
/**
 * _strspn - a func that get len of  pre.substr
 * @s: string to compare
 * @accept: 2nd string to compare
 * Return: number of byte in s
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i;
	unsigned int j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				break;
			}
		}
		if (accept[j] == '\0')
		{
			return (i);
		}
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     0         `
4-strpbrk.c/    0           0     0     644     350       `
#include "main.h"
/**
 * _strpbrk - checking for matching char
 * @s: string pointer
 * @accept: string to compare
 * Return: NULL
 */
char *_strpbrk(char *s, char *accept)
{
	int i;
	int j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				return (&s[i]);
			}
		}
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     477       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	unsigned int i;
	unsigned int j;

	if (*needle == '\0')
	{
		return (haystack);
	}

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
			{
				break;
			}
		}
		if (needle[j] == '\0')
		{
			return (&haystack[i]);
		}
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     0         `
9-strcpy.c/     0           0     0     644     462       `
#include <stdio.h>
#include "main.h"
/**
 * char *_strcpy - a function that copies string
 * @src: the source string
 * @dest: the destination string
 * Return: Returns pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int index;
	int src_length;

	src_length = 0;

	while (*(src + src_length) != '\0')
	{
		src_length++;
	}

	for (index = 0; index < src_length; index++)
	{
		dest[index] = src[index];
	}
	dest[src_length] = '\0';

	return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     245       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));

}

